#include <iostream>
#include <graphics.h>

using namespace std;

#define SIGN(x) ( (x > 0) ? 1 : ( (x < 0) ? -1 : 0 ) )
#define ABS(x)	( (x > 0) ? x : -x )

class pixel
{
	protected:
		int x1;
		int y1;
		int x2;
		int y2;
		void dda();
		void bresenham();
};

class Line:protected pixel
{
	public:
		void line();
};

void pixel::dda()
{
	int dx = x2-x1;
	int dy = y2-y1;
	int length = (ABS(dx) > ABS(dy)) ? ABS(dx) : ABS(dy);
	dx /= length;
	dy /= length;
	float x = x1 + 0.5*SIGN(dx), y = y1 + 0.5*SIGN(dy);
	for (int i = 0 ; i <= length ; i++)
	{
		putpixel((int)x,(int)y,0);				//Colour set as white
		x += dx;
		y += dy;
	}
}

void pixel::bresenham()
{
	;
}

void Line::line()
{
	cout<<"\nEnter starting Point:";
	while (1)
	{
		cout<<"\n\t> x : ";
		cin>>x1;
		if (x1 > 0)
			break;
		else
			cout<<"\nNegative Value not allowed.\n";
	}
	while (1)
	{
		cout<<"\n\t> y : ";
		cin>>y1;
		if (y1 > 0)
			break;
		else
			cout<<"\nNegative Value not allowed.\n";
	}
	cout<<"Enter ending Point:";
	while (1)
	{
		cout<<"\n\t> x : ";
		cin>>x2;
		if (x2 > 0)
			break;
		else
			cout<<"\nNegative Value not allowed.\n";
	}
	while (1)
	{
		cout<<"\n\t> y : ";
		cin>>y2;
		if (y2 > 0)
			break;
		else
			cout<<"\nNegative Value not allowed.\n";
	}
	int gm, gd = DETECT;
	initgraph(&gd, &gd, NULL);
	dda();
	x1 += 20;
	y1 += 20;
	x2 += 20;
	y2 += 20;
	//bresenham();
	cin.ignore();
	getch();
	closegraph();
}

int main()
{
	Line run;
	run.line();
	return 0;
}
